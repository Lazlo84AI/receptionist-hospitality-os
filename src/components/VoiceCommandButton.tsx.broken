import { useState, useEffect } from 'react';
import { 
  FileText, 
  Edit3, 
  Mic,
  X,
  AlertTriangle,
  Users,
  Clock,
  Wrench,
  MapPin,
  User,
  Calendar,
  CheckSquare,
  Bell,
  Paperclip,
  Upload
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ChecklistModal } from '@/components/modals/ChecklistModal';
import { ChecklistComponent } from '@/components/ChecklistComponent';
import { ReminderModal } from '@/components/modals/ReminderModal';
import { useToast } from '@/hooks/use-toast';
import { useProfiles, useLocations } from '@/hooks/useSupabaseData';
import { cn } from '@/lib/utils';
import { LocationSection } from '@/components/LocationSection';

const categories = [
  { id: 'incident', label: 'Ongoing Incident', icon: AlertTriangle, color: 'bg-urgence-red text-warm-cream' },
  { id: 'client_request', label: 'Client Request', icon: Users, color: 'bg-champagne-gold text-palace-navy' },
  { id: 'follow_up', label: 'Follow-up', icon: Clock, color: 'bg-palace-navy text-warm-cream' },
  { id: 'internal_task', label: 'Internal Task', icon: Wrench, color: 'bg-muted text-muted-foreground' },
];

const originTypes = [
  { id: 'client', label: 'Client' },
  { id: 'maintenance', label: 'Maintenance' },
  { id: 'team', label: 'Team' },
];

const priorityLevels = [
  { id: 'normal', label: 'Normal', color: 'bg-muted text-muted-foreground' },
  { id: 'urgent', label: 'Urgent', color: 'bg-urgence-red text-warm-cream' },
];

const services = [
  { id: 'housekeeping', label: 'Housekeeping' },
  { id: 'reception', label: 'Reception' },
  { id: 'maintenance', label: 'Maintenance' },
];

export function VoiceCommandButton() {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [creationMode, setCreationMode] = useState<'edit' | 'voice' | null>(null);
  const [isChecklistModalOpen, setIsChecklistModalOpen] = useState(false);
  const [isReminderModalOpen, setIsReminderModalOpen] = useState(false);
  const [isAttachmentModalOpen, setIsAttachmentModalOpen] = useState(false);
  const [checklists, setChecklists] = useState<Array<{ id: string; title: string; items: any[] }>>([]);
  const [attachments, setAttachments] = useState<Array<{ id: string; name: string; size: number; type?: 'file' | 'link'; url?: string }>>([]);
  const [reminders, setReminders] = useState<Array<{ id: string; subject: string; scheduleType: string; date?: Date; time?: string; shifts?: string[]; frequency?: string; endDate?: Date }>>([]);
  const [editingReminder, setEditingReminder] = useState<any>(null);
  const [linkUrl, setLinkUrl] = useState('');
  
  // Fetch real-time data from database
  const { profiles: hotelMembers, loading: profilesLoading } = useProfiles();
  const { locations, loading: locationsLoading } = useLocations();
  
  
  // Form state
  const [formData, setFormData] = useState({
    title: '',
    category: '',
    originType: '',
    priority: 'normal',
    service: '',
    assignedMember: '',
    location: '',
    description: '',
    guestName: '', // For special requests
    roomNumber: '', // For special requests
    recipient: '', // For follow-ups
    dueDate: null as Date | null,
  });
  const { toast } = useToast();

  const handleMainButtonClick = () => {
    console.log('CLIC PRINCIPAL D√âTECT√â!');
    // Ouvrir directement la modal de cr√©ation
    setCreationMode('edit'); // Mode par d√©faut
    setShowCreateModal(true);
  };

  const handleVoiceModeClick = () => {
    console.log('üé§ D√âBUT - Basculer vers mode vocal');
    console.log('üé§ √âtat actuel:', { showCreateModal, creationMode });
    
    // Simplement basculer vers le mode vocal sans fermer la modal
    setCreationMode('voice');
  };

  const resetForm = () => {
    setFormData({
      title: '',
      category: '',
      originType: '',
      priority: 'normal',
      service: '',
      assignedMember: '',
      location: '',
      description: '',
      guestName: '',
      roomNumber: '',
      recipient: '',
      dueDate: null,
    });
    setChecklists([]);
    setAttachments([]);
    setReminders([]);
    setLinkUrl('');
  };

  const handleAddChecklist = (title: string) => {
    const newChecklist = {
      id: Date.now().toString(),
      title: title,
      items: [], // Initialize with empty items array
    };
    setChecklists(prev => [...prev, newChecklist]);
  };

  const handleDeleteChecklist = (checklistId: string) => {
    setChecklists(prev => prev.filter(checklist => checklist.id !== checklistId));
  };

  const handleUpdateChecklistItems = (checklistId: string, items: any[]) => {
    setChecklists(prev => 
      prev.map(checklist => 
        checklist.id === checklistId 
          ? { ...checklist, items }
          : checklist
      )
    );
  };

  const handleAddLink = () => {
    if (linkUrl.trim()) {
      const newAttachment = {
        id: Date.now().toString() + Math.random(),
        name: linkUrl.length > 50 ? linkUrl.substring(0, 47) + '...' : linkUrl,
        size: 0,
        type: 'link' as const,
        url: linkUrl
      };
      setAttachments(prev => [...prev, newAttachment]);
      setLinkUrl('');
    }
  };

  const handleAddReminder = (reminderData: any) => {
    const newReminder = {
      id: Date.now().toString(),
      subject: reminderData.subject,
      scheduleType: reminderData.scheduleType,
      date: reminderData.date,
      time: reminderData.time,
      shifts: reminderData.shifts,
      frequency: reminderData.frequency,
      endDate: reminderData.endDate,
    };
    setReminders(prev => [...prev, newReminder]);
  };

  const handleUpdateReminder = async (reminderId: string, reminderData: any) => {
    const updatedReminder = {
      id: reminderId,
      subject: reminderData.subject,
      scheduleType: reminderData.scheduleType,
      date: reminderData.date,
      time: reminderData.time,
      shifts: reminderData.shifts,
      frequency: reminderData.frequency,
      endDate: reminderData.endDate,
    };
    
    setReminders(prev => 
      prev.map(reminder => 
        reminder.id === reminderId ? updatedReminder : reminder
      )
    );

    // Send webhook for reminder update
    try {
      const reminderPayload = {
        id: reminderId,
        title: reminderData.subject,
        remind_at: reminderData.date?.toISOString() || new Date().toISOString(),
        frequency: reminderData.frequency || 'once',
        schedule_type: reminderData.scheduleType,
        shifts: reminderData.shifts || [],
        end_date: reminderData.endDate?.toISOString() || null,
      };

      const { sendTaskUpdatedEvent } = await import('@/lib/webhookService');
      await sendTaskUpdatedEvent(
        'temp-task-id', // This would be the actual task ID in a real implementation
        {}, // Original task data
        { title: formData.title || 'Task' }, // Updated task data
        hotelMembers,
        locations,
        { reminders: [reminderPayload] }
      );
    } catch (error) {
      console.error('Error sending reminder update webhook:', error);
    }
  };

  const handleDeleteReminder = (reminderId: string) => {
    setReminders(prev => prev.filter(reminder => reminder.id !== reminderId));
  };

  const handleCreateCard = async () => {
    try {
      // Create proper payload based on task category
      let taskData: any = {};

      // Base fields that all tasks need
      const baseFields = {
        task_category: formData.category,
        origin_type: formData.originType, // Toujours envoyer originType
        assigned_member: formData.assignedMember, // For ID mapping in webhook service
        location: formData.location, // For ID mapping in webhook service
        guest_name: formData.guestName || null, // Toujours envoyer guestName
        room_number: formData.roomNumber || null, // Toujours envoyer roomNumber
        service: formData.service || null, // Uniformiser le service
        title: formData.title || 'New Task', // Toujours envoyer le titre
        description: formData.description || '', // Toujours envoyer la description
        priority: formData.priority || 'normal', // Toujours envoyer la priorit√©
        assigned_to: formData.assignedMember || null,
      };

      switch (formData.category) {
        case 'client_request':
          taskData = {
            ...baseFields,
            arrival_date: formData.dueDate?.toISOString().split('T')[0] || null,
          };
          break;

        case 'incident':
          taskData = {
            ...baseFields,
          };
          break;

        case 'follow_up':
          taskData = {
            ...baseFields,
            recipient: formData.recipient || null,
            due_date: formData.dueDate?.toISOString().split('T')[0] || null,
          };
          break;

        case 'internal_task':
        default:
          taskData = {
            ...baseFields,
            due_date: formData.dueDate?.toISOString().split('T')[0] || null,
            department: null, // You can map this from form if needed
          };
          break;
      }

      // Prepare enhancements for webhook
      console.log('üîç DEBUG: Current checklists state:', checklists);
      const enhancements = {
        checklists: checklists.map(checklist => {
          console.log('üîç DEBUG: Processing checklist:', checklist);
          return {
            id: checklist.id,
            title: checklist.title,
            items: checklist.items || [] // Include actual items if they exist
          };
        }),
        attachments: attachments.map(attachment => ({
          id: attachment.id,
          name: attachment.name,
          size: attachment.size,
          type: attachment.type || 'file', // Utiliser le vrai type
          url: attachment.type === 'link' ? attachment.url : `drive-path-to-be-defined/${attachment.name}` // URL r√©elle pour links, chemin drive pour files
        })),
        reminders: reminders.map(reminder => ({
          id: reminder.id,
          title: reminder.subject,
          remind_at: reminder.scheduleType === 'datetime' && reminder.date && reminder.time 
            ? new Date(`${reminder.date.toISOString().split('T')[0]}T${reminder.time}`).toISOString()
            : new Date().toISOString(),
          frequency: reminder.frequency || 'once',
          schedule_type: reminder.scheduleType,
          shifts: reminder.shifts || [],
          end_date: reminder.endDate?.toISOString() || null,
        })),
        comments: [], // No comments in current UI
      };
      
      console.log('üîç DEBUG: Final enhancements object:', enhancements);

      // Send webhook event for task creation
      const { sendTaskCreatedEvent } = await import('@/lib/webhookService');
      const result = await sendTaskCreatedEvent(taskData, hotelMembers, locations, enhancements);
      
      if (result.success) {
        toast({
          title: "Succ√®s",
          description: "La carte a √©t√© cr√©√©e avec succ√®s !",
          variant: "default",
        });
        setShowCreateModal(false);
        resetForm();
      } else {
        toast({
          title: "Erreur",
          description: result.error || "√âchec de la cr√©ation de la carte. Veuillez r√©essayer.",
          variant: "destructive",
        });
      }
      
    } catch (error) {
      console.error('Error creating card:', error);
      toast({
        title: "Erreur",
        description: "Une erreur s'est produite lors de la cr√©ation de la carte.",
        variant: "destructive",
      });
    }
  };

  return (
    <>
      {/* Backdrop when expanded */}
      {isExpanded && (
        <div 
          className="fixed inset-0 bg-black/20 backdrop-blur-sm z-40"
          onClick={() => setIsExpanded(false)}
        />
      )}

      {/* Creation Button System */}
      <div className="fixed bottom-6 right-6 z-[9999] flex flex-col items-end gap-4">
        {/* Voice Mode Button - √âtats 2, 3 et 4 */}
        {showCreateModal && (
          <div className="relative">
            <Button
              onClick={() => {
                console.log('Clic sur bouton Vocal - Basculer vers mode vocal');
                handleVoiceModeClick();
              }}
              className={cn(
                "h-16 w-16 rounded-full transition-all duration-500 pointer-events-auto cursor-pointer",
                "bg-champagne-gold hover:bg-champagne-gold/90 border-2 border-palace-navy",
                "shadow-lg mb-20"
              )}
            >
              <Mic className="h-6 w-6 text-palace-navy" />
            </Button>
            
            {/* Onde pour le bouton micro - seulement en mode vocal (√âtats 3 et 4) */}
            {creationMode === 'voice' && (
              <div className="absolute bottom-0 right-0 h-16 w-16 rounded-full border-2 border-hotel-yellow/20 animate-ping pointer-events-none" />
            )}
          </div>
        )}

        {/* Main Note Button */}
        <Button
          onClick={handleMainButtonClick}
          className={cn(
            "h-16 w-16 rounded-full transition-all duration-500",
            "bg-hotel-navy hover:bg-hotel-navy/90 border-2 border-hotel-yellow/50 hover:border-hotel-yellow",
            "shadow-lg pointer-events-auto cursor-pointer"
          )}
        >
          <FileText className="h-6 w-6 text-hotel-yellow" />
        </Button>

        {/* Onde pour le bouton principal - √âtats 1 et 2 seulement */}
        {(!showCreateModal || (showCreateModal && creationMode === 'edit')) && (
          <div className="absolute bottom-0 right-0 h-16 w-16 rounded-full border-2 border-champagne-gold/20 animate-ping pointer-events-none" />
        )}
      </div>

      {/* Create Card Modal */}
      <Dialog open={showCreateModal} onOpenChange={(open) => {
        setShowCreateModal(open);
        if (!open) {
          // Reset to initial state when closing modal
          setCreationMode(null);
          resetForm();
        }
      }}>
        <DialogContent className={cn(
          "max-w-4xl max-h-[90vh] overflow-y-auto",
          creationMode === 'voice' ? "bg-palace-navy text-warm-cream border-champagne-gold/20" : "bg-background"
        )}>
          <DialogHeader>
            <DialogTitle className={cn(
              "flex items-center gap-2 text-lg font-semibold",
              creationMode === 'voice' ? "text-champagne-gold" : "text-foreground"
            )}>
              {creationMode === 'voice' ? (
                <Mic className="h-5 w-5 text-champagne-gold" />
              ) : (
                <Edit3 className="h-5 w-5" />
              )}
              Create New Card / New task - {creationMode === 'voice' ? 'Voice' : 'Edit'} Mode
            </DialogTitle>
          </DialogHeader>
          
          <div className={cn(
            "space-y-6",
            creationMode === 'voice' ? "text-warm-cream" : "text-foreground"
          )}>
            {creationMode === 'voice' && (
              <div className="flex items-center gap-2 p-3 rounded-lg bg-champagne-gold/10 border border-champagne-gold/20">
                <span className="text-champagne-gold">üí°</span>
                <span className="text-sm text-champagne-gold">
                  Describe precisely for better understanding
                </span>
              </div>
            )}
            {/* Title Field */}
            <div className="space-y-3">
              <label className={cn(
                "text-sm font-medium",
                creationMode === 'voice' ? "text-champagne-gold" : "text-foreground"
              )}>
                Card Title *
              </label>
              <Input 
                placeholder="Descriptive card title"
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                className={cn(
                  "transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20",
                  creationMode === 'voice' ? "bg-palace-navy/50 border-champagne-gold/30 text-warm-cream placeholder:text-warm-cream/60" : ""
                )}
              />
            </div>

            {/* Category Selection */}
            <div className="space-y-3">
              <label className="text-sm font-medium">Card Category *</label>
              <div className="grid grid-cols-2 gap-3">
                {categories.map((category) => (
                  <Card 
                    key={category.id}
                    className={cn(
                      "cursor-pointer transition-all duration-200 hover:scale-105 hover:ring-2 hover:ring-hotel-yellow/50",
                      formData.category === category.id ? "ring-2 ring-hotel-yellow bg-hotel-yellow/10" : "hover:shadow-lg",
                      creationMode === 'voice' ? "bg-gray-800 border-gray-600" : ""
                    )}
                    onClick={() => setFormData(prev => ({ 
                      ...prev, 
                      category: category.id,
                      // Auto-s√©lectionner "client" pour Origin Type si Client Request
                      // Auto-s√©lectionner "team" pour Origin Type si Internal Task
                      originType: category.id === 'client_request' ? 'client' : 
                                  category.id === 'internal_task' ? 'team' : prev.originType
                    }))}
                  >
                    <CardContent className="p-4 flex items-center gap-3">
                      <div className={cn("p-2 rounded-full", category.color)}>
                        <category.icon className="h-5 w-5" />
                      </div>
                      <span className={cn(
                        "font-medium",
                        creationMode === 'voice' ? "text-white" : ""
                      )}>{category.label}</span>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>


            {/* Conditional Fields for Client Requests */}
            {formData.category === 'client_request' && (
              <div className="space-y-3">
                <label className="text-sm font-medium">Client Name</label>
                <Input 
                  placeholder="Client name"
                  value={formData.guestName}
                  onChange={(e) => setFormData(prev => ({ ...prev, guestName: e.target.value }))}
                  className="transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20"
                />
              </div>
            )}

            {/* Conditional Fields for Follow-ups */}
            {formData.category === 'follow_up' && (
              <div className="space-y-3">
                <label className="text-sm font-medium">Follow-up Recipient</label>
                <Input 
                  placeholder="Recipient name"
                  value={formData.recipient}
                  onChange={(e) => setFormData(prev => ({ ...prev, recipient: e.target.value }))}
                  className="transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20"
                />
              </div>
            )}

            {/* Origin Type */}
            <div className="space-y-3">
              <label className="text-sm font-medium">Origin Type *</label>
              <Select 
                value={formData.originType} 
                onValueChange={(value) => setFormData(prev => ({ ...prev, originType: value }))}
                disabled={formData.category === 'client_request' || formData.category === 'internal_task'}
                className={cn(
                  (formData.category === 'client_request' || formData.category === 'internal_task') && 'opacity-75 cursor-not-allowed'
                )}
              >
                <SelectTrigger>
                  <SelectValue placeholder={
                    formData.category === 'client_request' ? 'Client (auto-selected)' :
                    formData.category === 'internal_task' ? 'Team (auto-selected)' : 
                    'Select origin type'
                  } />
                </SelectTrigger>
                <SelectContent>
                  {originTypes.map((type) => (
                    <SelectItem key={type.id} value={type.id}>{type.label}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Priority Level (for incidents, client requests, and internal tasks) */}
            {(formData.category === 'incident' || formData.category === 'client_request' || formData.category === 'internal_task') && (
              <div className="space-y-3">
                <label className="text-sm font-medium">Priority Level *</label>
                <div className="flex gap-3">
                  {priorityLevels.map((priority) => (
                    <Button
                      key={priority.id}
                      variant={formData.priority === priority.id ? "default" : "outline"}
                      onClick={() => setFormData(prev => ({ ...prev, priority: priority.id }))}
                      className={cn(
                        "transition-all duration-200",
                        formData.priority === priority.id 
                          ? "bg-hotel-gold-dark text-hotel-navy border-2 border-hotel-yellow shadow-lg" 
                          : "border border-input hover:border-hotel-yellow hover:bg-hotel-yellow/10",
                        creationMode === 'voice' ? "bg-gray-800 border-gray-600 text-white hover:bg-gray-700" : ""
                      )}
                    >
                      {priority.label}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Assignment */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-3">
                <label className="text-sm font-medium">
                  Service {['client_request', 'incident', 'follow_up'].includes(formData.category) ? '*' : ''}
                </label>
                <Select 
                  value={formData.service} 
                  onValueChange={(value) => setFormData(prev => ({ 
                    ...prev, 
                    service: value,
                    assignedMember: '' // Reset member when service changes
                  }))}
                >
                  <SelectTrigger className="transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20">
                    <SelectValue placeholder="Select service" />
                  </SelectTrigger>
                  <SelectContent>
                    {services.map((service) => (
                      <SelectItem key={service.id} value={service.id}>{service.label}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-3">
                <label className="text-sm font-medium">
                  Assigned Members {['client_request', 'incident', 'follow_up'].includes(formData.category) ? '*' : ''}
                </label>
                {formData.service ? (
                  <Select 
                    value={formData.assignedMember} 
                    onValueChange={(value) => setFormData(prev => ({ ...prev, assignedMember: value }))}
                  >
                    <SelectTrigger className="transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20">
                      <SelectValue placeholder="Select a member" />
                    </SelectTrigger>
                    <SelectContent>
                      {hotelMembers
                        .filter(member => {
                          if (!formData.service) return false;
                          // Map service selection to department values
                          switch (formData.service) {
                            case 'housekeeping':
                              return member.department === 'Housekeeping';
                            case 'reception':
                              return member.department === 'Reception';
                            case 'maintenance':
                              return member.department === 'Maintenance';
                            default:
                              return false;
                          }
                        })
                        .map((member) => (
                            <SelectItem key={member.id} value={member.full_name || `${member.first_name} ${member.last_name}`}>
                            {member.full_name || `${member.first_name} ${member.last_name}`} - {member.display_role || member.job_title || member.role}
                          </SelectItem>
                        })}
                    </SelectContent>
                  </Select>
                ) : (
                  <div className="h-10 flex items-center px-3 py-2 border border-input bg-muted text-muted-foreground rounded-md text-sm">
                    Select a service first
                  </div>
                )}
              </div>
            </div>

            {/* Location Module for all card types */}
            {formData.category && (
              <LocationSection
                formData={formData}
                setFormData={setFormData}
                locations={locations}
              />
            )}

            {/* Due Date for Follow-ups and Tasks */}
            {(formData.category === 'follow_up' || formData.category === 'internal_task') && (
              <div className="space-y-3">
                <label className="text-sm font-medium">
                  Due Date {formData.category === 'internal_task' ? '*' : ''}
                </label>
                <Input 
                  type="datetime-local"
                  value={formData.dueDate ? formData.dueDate.toISOString().slice(0, 16) : ''}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    dueDate: e.target.value ? new Date(e.target.value) : null 
                  }))}
                />
              </div>
            )}

            {/* Description */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium">Custom Description</label>
                <span className="text-xs text-muted-foreground">
                  üí° Describe precisely for better understanding
                </span>
              </div>
              <Textarea 
                placeholder="Describe precisely the situation or request..."
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                rows={4}
                className="transition-all duration-200 hover:border-hotel-yellow focus:border-hotel-yellow focus:ring-2 focus:ring-hotel-yellow/20"
              />
              {/* Texte informatif pour les demandes client */}
              {formData.category === 'client_request' && (
                <p className="text-sm text-muted-foreground italic mt-2">
                  (with client name, context of the need and any personal information to be more friendly)
                </p>
              )}
            </div>

            {/* Additional Features */}
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={() => setIsChecklistModalOpen(true)}
                className="flex items-center gap-2"
              >
                <CheckSquare className="h-4 w-4" />
                Add checklist
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsReminderModalOpen(true)}
                className="flex items-center gap-2"
              >
                <Bell className="h-4 w-4" />
                Set up reminder
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsAttachmentModalOpen(true)}
                className="flex items-center gap-2"
              >
                <Paperclip className="h-4 w-4" />
                Attachment
              </Button>
            </div>

            {/* Display Added Checklists */}
            {checklists.length > 0 && (
              <div className="space-y-4">
                <div className="text-sm font-medium text-muted-foreground">Added Checklists</div>
                 {checklists.map((checklist) => (
                   <ChecklistComponent
                     key={checklist.id}
                     title={checklist.title}
                     onDelete={() => handleDeleteChecklist(checklist.id)}
                     onItemsChange={(items) => handleUpdateChecklistItems(checklist.id, items)}
                   />
                 ))}
              </div>
            )}

            {/* Display Added Reminders */}
            {reminders.length > 0 && (
              <div className="space-y-4">
                <div className="text-sm font-medium text-muted-foreground">Added Reminders</div>
                {reminders.map((reminder) => (
                   <div 
                     key={reminder.id} 
                     className="flex items-center justify-between p-3 bg-muted rounded-lg cursor-pointer hover:bg-muted/80"
                     onClick={() => {
                       setEditingReminder(reminder);
                       setIsReminderModalOpen(true);
                     }}
                   >
                     <div className="flex items-center gap-3">
                       <Bell className="h-4 w-4 text-primary" />
                       <div>
                         <p className="text-sm font-medium">{reminder.subject}</p>
                         <p className="text-xs text-muted-foreground">
                           {reminder.scheduleType === 'datetime' && reminder.date && reminder.time
                             ? `${reminder.date.toLocaleDateString()} at ${reminder.time}`
                             : reminder.scheduleType === 'shifts' && reminder.shifts
                             ? `During ${reminder.shifts.join(', ')} shifts`
                             : 'Custom schedule'}
                         </p>
                       </div>
                     </div>
                     <Button
                       variant="ghost"
                       size="sm"
                       onClick={() => handleDeleteReminder(reminder.id)}
                     >
                       <X className="h-4 w-4" />
                     </Button>
                  </div>
                ))}
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => setShowCreateModal(false)}
              >
                Cancel
              </Button>
              <Button 
                onClick={handleCreateCard}
                disabled={
                  // Champs obligatoires universels
                  !formData.title.trim() || 
                  !formData.category ||
                  !formData.originType ||
                  // Priority obligatoire pour incident, client_request, internal_task
                  (['incident', 'client_request', 'internal_task'].includes(formData.category) && 
                    !formData.priority) ||
                  // Service et Assigned Members obligatoires pour Client Request, Incident, Follow-up
                  (['client_request', 'incident', 'follow_up'].includes(formData.category) && (
                    !formData.service || 
                    !formData.assignedMember
                  )) ||
                  // Location obligatoire pour Client Request
                  (formData.category === 'client_request' && !formData.location) ||
                  // Due Date obligatoire pour Internal Task
                  (formData.category === 'internal_task' && !formData.dueDate)
                }
                className="bg-champagne-gold text-palace-navy hover:bg-champagne-gold/90"
              >
                Create Card
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Checklist Modal */}
      <ChecklistModal
        isOpen={isChecklistModalOpen}
        onClose={() => setIsChecklistModalOpen(false)}
        onAdd={handleAddChecklist}
      />

      {/* Reminder Modal */}
      <ReminderModal
        isOpen={isReminderModalOpen}
        onClose={() => {
          setIsReminderModalOpen(false);
          setEditingReminder(null);
        }}
        taskTitle={formData.title}
        editingReminder={editingReminder}
        onSave={(reminderData) => {
          if (editingReminder) {
            handleUpdateReminder(editingReminder.id, reminderData);
          } else {
            handleAddReminder(reminderData);
          }
        }}
      />

      {/* Attachment Modal */}
      <Dialog open={isAttachmentModalOpen} onOpenChange={setIsAttachmentModalOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Paperclip className="h-5 w-5" />
              Add attachment
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Drag and Drop Zone */}
            <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-8 text-center space-y-4 hover:border-primary/50 transition-colors">
              <Upload className="h-12 w-12 mx-auto text-muted-foreground" />
              <div className="space-y-2">
                <p className="text-sm font-medium">Drag and drop your files here</p>
                <p className="text-xs text-muted-foreground">or click to browse</p>
              </div>
              <Input
                type="file"
                className="hidden"
                multiple
                onChange={(e) => {
                  const files = Array.from(e.target.files || []);
                  files.forEach(file => {
                    const newAttachment = {
                      id: Date.now().toString() + Math.random(),
                      name: file.name,
                      size: file.size,
                      type: 'file' as const
                    };
                    setAttachments(prev => [...prev, newAttachment]);
                  });
                }}
              />
            </div>

            {/* OR Separator */}
            <div className="flex items-center gap-4">
              <div className="flex-1 border-t border-muted-foreground/20"></div>
              <span className="text-sm text-muted-foreground font-medium">OR</span>
              <div className="flex-1 border-t border-muted-foreground/20"></div>
            </div>

            {/* Link Section */}
            <div className="space-y-3">
              <div className="text-center">
                <p className="text-sm font-medium">PASTE A LINK TO THIS DOCUMENT</p>
                <p className="text-xs text-muted-foreground mt-1">Internet URL, company drive link, etc.</p>
              </div>
              <div className="flex gap-2">
                <Input
                  type="url"
                  placeholder="https://example.com/document or drive.company.com/file..."
                  value={linkUrl}
                  onChange={(e) => setLinkUrl(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && linkUrl.trim()) {
                      handleAddLink();
                    }
                  }}
                />
                <Button
                  onClick={handleAddLink}
                  disabled={!linkUrl.trim()}
                  size="sm"
                >
                  Add Link
                </Button>
              </div>
            </div>

            {/* Attachments List */}
            {attachments.length > 0 && (
              <div className="space-y-2">
                <p className="text-sm font-medium">Selected attachments:</p>
                {attachments.map((attachment) => (
                  <div key={attachment.id} className="flex items-center justify-between p-2 bg-muted rounded-md">
                    <div className="flex items-center gap-2">
                      {attachment.type === 'link' ? (
                        <>
                          <Paperclip className="h-4 w-4" />
                          <div className="flex flex-col">
                            <span className="text-sm font-medium">Link: {attachment.name}</span>
                            <span className="text-xs text-muted-foreground">{attachment.url}</span>
                          </div>
                        </>
                      ) : (
                        <>
                          <Paperclip className="h-4 w-4" />
                          <span className="text-sm">{attachment.name}</span>
                          <span className="text-xs text-muted-foreground">
                            ({(attachment.size / 1024).toFixed(1)} KB)
                          </span>
                        </>
                      )}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setAttachments(prev => prev.filter(a => a.id !== attachment.id))}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => {
                  setIsAttachmentModalOpen(false);
                  setLinkUrl(''); // Reset link URL when closing
                }}
              >
                Cancel
              </Button>
              <Button 
                onClick={() => {
                  setIsAttachmentModalOpen(false);
                  setLinkUrl(''); // Reset link URL when closing
                  if (attachments.length > 0) {
                    toast({
                      title: "Attachments added",
                      description: `${attachments.length} attachment(s) added to the card.`,
                    });
                  }
                }}
              >
                Done
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}